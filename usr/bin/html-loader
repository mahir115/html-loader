#!/usr/bin/env python3

import sys
import os
import mimetypes
from PyQt5.QtWidgets import QApplication, QMainWindow, QMessageBox, QFileDialog
from PyQt5.QtWebEngineWidgets import QWebEngineView, QWebEngineProfile
from PyQt5.QtCore import QUrl, QStandardPaths


class Browser(QMainWindow):
    def __init__(self, html_file):
        super().__init__()

        self.html_file = html_file
        self.setWindowTitle("HTML Loader")  # Temporary until title is fetched

        self.browser = QWebEngineView()

        # Set download path with Save File As dialog
        profile = QWebEngineProfile.defaultProfile()
        profile.downloadRequested.connect(self.handle_download_requested)

        self.browser.titleChanged.connect(self.setWindowTitle)
        self.browser.setUrl(QUrl.fromLocalFile(os.path.abspath(html_file)))

        self.setCentralWidget(self.browser)
        self.resize(1024, 768)
        self.show()

    def handle_download_requested(self, download):
        suggested_name = download.downloadFileName()
        options = QFileDialog.Options()
        # Show Save File As dialog
        file_path, _ = QFileDialog.getSaveFileName(self, "Save File As", suggested_name, options=options)
        if file_path:
            download.setPath(file_path)
            download.accept()
        else:
            download.cancel()


def is_html_file(path):
    if not os.path.isfile(path):
        return False
    mime, _ = mimetypes.guess_type(path)
    return mime == 'text/html'


def main():
    if len(sys.argv) < 2:
        print("Usage: html-loader.py <file.html>")
        sys.exit(1)

    html_file = sys.argv[1]

    if not is_html_file(html_file):
        msg = QMessageBox()
        msg.setIcon(QMessageBox.Critical)
        msg.setText("Error: Not a valid HTML file.")
        msg.setWindowTitle("Invalid File")
        msg.exec_()
        sys.exit(1)

    app = QApplication(sys.argv)
    browser = Browser(html_file)
    sys.exit(app.exec_())


if __name__ == "__main__":
    main()

